1. Consider the leftmost and righmost appearances of some value in an array. We'll say that the "span" is the number of
 elements between the two inclusive. A single value has a span of 1. Returns the largest span found in the given array. 
(Efficiency is not a priority.)

maxSpan([1, 2, 1, 1, 3]) → 4
maxSpan([1, 4, 2, 1, 4, 1, 4]) → 6
maxSpan([1, 4, 2, 1, 4, 4, 4]) → 6

Test your code at : http://codingbat.com/prob/p189576


int a[]={1,2,1,1,3}
int maxs=0;
for(int i=0;i<=a.length;i++)
{ latestS=0;
   for(int j=i;j<=a.length;j++)
{
 if(a[i]==a[j])
{
  latestS=j-i+1;
}
if(latestS>maxS)
{
    maxs=latests;
}

}
return maxs;

  

}


2. Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one
 side is equal to the sum of the numbers on the other side.

canBalance([1, 1, 1, 2, 1]) → true
canBalance([2, 1, 1, 2, 1]) → false
canBalance([10, 10]) → true
//

canbalance(int a[])
{
  for(int i=0;i<=a.length;i++)
{
     if(sum(a,0,i) == sum(a,i,a.length))
       {return true;}
}

return false;


}

int sum(int a[],int start,int end)

{
int sum=0;

for(int i=start;i<=end;i++)

{
  sum=sum+a[i];

}
return sum;
}

Test your code at :http://codingbat.com/prob/p158767


3. Say that a "clump" in an array is a series of 2 or more adjacent elements of the same value. Return the number
 of clumps in the given array.

countClumps([1, 2, 2, 3, 4, 4]) → 2
countClumps([1, 1, 2, 1, 1]) → 2
countClumps([1, 1, 1, 1, 1]) → 1

int count=0;
int currentELement=0;
for(int i=0;i<=a.length-1;i++)
{
if(a[i]==a[i+1])
{
      currentElement=a[i];
     count++;
   do {
    if(i== a.length-1) break;

   i++;
} while(a[i]== currentElement)
}

}
syso(count);


Test your code at : http://codingbat.com/prob/p193817

4. We'll say that a "mirror" section in an array is a group of contiguous elements such that somewhere in the array,
 the same group appears in reverse order. For example, the largest mirror section in {1, 2, 3, 8, 9, 3, 2, 1} is 
length 3 (the {1, 2, 3} part). Return the size of the largest mirror section found in the given array.

maxMirror([1, 2, 3, 8, 9, 3, 2, 1]) → 3
maxMirror([1, 2, 1, 4]) → 3
maxMirror([7, 1, 2, 9, 7, 2, 1]) → 2

Test your code at : http://codingbat.com/prob/p196409

5. Given two arrays of ints sorted in increasing order, outer and inner, return true if all of the numbers in inner appear in outer.
 The best solution makes only a single "linear" pass of both arrays, taking advantage of the fact that both arrays are already 
in sorted order.

linearIn([1, 2, 4, 6], [2, 4]) → true
linearIn([1, 2, 4, 6], [2, 3, 4]) → false
linearIn([1, 2, 4, 4, 6], [2, 4]) → true

Test your code at :http://codingbat.com/prob/p134022




